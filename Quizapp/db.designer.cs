#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Quizapp
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QuizApp")]
	public partial class dbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertVraag(Vraag instance);
    partial void UpdateVraag(Vraag instance);
    partial void DeleteVraag(Vraag instance);
    partial void InsertSubCategorie(SubCategorie instance);
    partial void UpdateSubCategorie(SubCategorie instance);
    partial void DeleteSubCategorie(SubCategorie instance);
    partial void InsertAntwoord(Antwoord instance);
    partial void UpdateAntwoord(Antwoord instance);
    partial void DeleteAntwoord(Antwoord instance);
    #endregion
		
		public dbDataContext() : 
				base(global::Quizapp.Properties.Settings.Default.QuizAppConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Vraag> Vraags
		{
			get
			{
				return this.GetTable<Vraag>();
			}
		}
		
		public System.Data.Linq.Table<SubCategorie> SubCategories
		{
			get
			{
				return this.GetTable<SubCategorie>();
			}
		}
		
		public System.Data.Linq.Table<Antwoord> Antwoords
		{
			get
			{
				return this.GetTable<Antwoord>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vraag")]
	public partial class Vraag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _text;
		
		private int _subCategorieId;
		
		private bool _isActive;
		
		private EntitySet<Antwoord> _Antwoords;
		
		private EntityRef<SubCategorie> _SubCategorie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnsubCategorieIdChanging(int value);
    partial void OnsubCategorieIdChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    #endregion
		
		public Vraag()
		{
			this._Antwoords = new EntitySet<Antwoord>(new Action<Antwoord>(this.attach_Antwoords), new Action<Antwoord>(this.detach_Antwoords));
			this._SubCategorie = default(EntityRef<SubCategorie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subCategorieId", DbType="Int NOT NULL")]
		public int subCategorieId
		{
			get
			{
				return this._subCategorieId;
			}
			set
			{
				if ((this._subCategorieId != value))
				{
					if (this._SubCategorie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubCategorieIdChanging(value);
					this.SendPropertyChanging();
					this._subCategorieId = value;
					this.SendPropertyChanged("subCategorieId");
					this.OnsubCategorieIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vraag_Antwoord", Storage="_Antwoords", ThisKey="id", OtherKey="vraagId")]
		public EntitySet<Antwoord> Antwoords
		{
			get
			{
				return this._Antwoords;
			}
			set
			{
				this._Antwoords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCategorie_Vraag", Storage="_SubCategorie", ThisKey="subCategorieId", OtherKey="id", IsForeignKey=true)]
		public SubCategorie SubCategorie
		{
			get
			{
				return this._SubCategorie.Entity;
			}
			set
			{
				SubCategorie previousValue = this._SubCategorie.Entity;
				if (((previousValue != value) 
							|| (this._SubCategorie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubCategorie.Entity = null;
						previousValue.Vraags.Remove(this);
					}
					this._SubCategorie.Entity = value;
					if ((value != null))
					{
						value.Vraags.Add(this);
						this._subCategorieId = value.id;
					}
					else
					{
						this._subCategorieId = default(int);
					}
					this.SendPropertyChanged("SubCategorie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Antwoords(Antwoord entity)
		{
			this.SendPropertyChanging();
			entity.Vraag = this;
		}
		
		private void detach_Antwoords(Antwoord entity)
		{
			this.SendPropertyChanging();
			entity.Vraag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubCategorie")]
	public partial class SubCategorie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _parentSubCategorieId;
		
		private string _naam;
		
		private string _beschrijving;
		
		private bool _isActive;
		
		private EntitySet<Vraag> _Vraags;
		
		private EntitySet<SubCategorie> _SubCategories;
		
		private EntityRef<SubCategorie> _SubCategorie1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnparentSubCategorieIdChanging(System.Nullable<int> value);
    partial void OnparentSubCategorieIdChanged();
    partial void OnnaamChanging(string value);
    partial void OnnaamChanged();
    partial void OnbeschrijvingChanging(string value);
    partial void OnbeschrijvingChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    #endregion
		
		public SubCategorie()
		{
			this._Vraags = new EntitySet<Vraag>(new Action<Vraag>(this.attach_Vraags), new Action<Vraag>(this.detach_Vraags));
			this._SubCategories = new EntitySet<SubCategorie>(new Action<SubCategorie>(this.attach_SubCategories), new Action<SubCategorie>(this.detach_SubCategories));
			this._SubCategorie1 = default(EntityRef<SubCategorie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentSubCategorieId", DbType="Int")]
		public System.Nullable<int> parentSubCategorieId
		{
			get
			{
				return this._parentSubCategorieId;
			}
			set
			{
				if ((this._parentSubCategorieId != value))
				{
					if (this._SubCategorie1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnparentSubCategorieIdChanging(value);
					this.SendPropertyChanging();
					this._parentSubCategorieId = value;
					this.SendPropertyChanged("parentSubCategorieId");
					this.OnparentSubCategorieIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_naam", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string naam
		{
			get
			{
				return this._naam;
			}
			set
			{
				if ((this._naam != value))
				{
					this.OnnaamChanging(value);
					this.SendPropertyChanging();
					this._naam = value;
					this.SendPropertyChanged("naam");
					this.OnnaamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_beschrijving", DbType="VarChar(255)")]
		public string beschrijving
		{
			get
			{
				return this._beschrijving;
			}
			set
			{
				if ((this._beschrijving != value))
				{
					this.OnbeschrijvingChanging(value);
					this.SendPropertyChanging();
					this._beschrijving = value;
					this.SendPropertyChanged("beschrijving");
					this.OnbeschrijvingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCategorie_Vraag", Storage="_Vraags", ThisKey="id", OtherKey="subCategorieId")]
		public EntitySet<Vraag> Vraags
		{
			get
			{
				return this._Vraags;
			}
			set
			{
				this._Vraags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCategorie_SubCategorie", Storage="_SubCategories", ThisKey="id", OtherKey="parentSubCategorieId")]
		public EntitySet<SubCategorie> SubCategories
		{
			get
			{
				return this._SubCategories;
			}
			set
			{
				this._SubCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCategorie_SubCategorie", Storage="_SubCategorie1", ThisKey="parentSubCategorieId", OtherKey="id", IsForeignKey=true)]
		public SubCategorie SubCategorie1
		{
			get
			{
				return this._SubCategorie1.Entity;
			}
			set
			{
				SubCategorie previousValue = this._SubCategorie1.Entity;
				if (((previousValue != value) 
							|| (this._SubCategorie1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubCategorie1.Entity = null;
						previousValue.SubCategories.Remove(this);
					}
					this._SubCategorie1.Entity = value;
					if ((value != null))
					{
						value.SubCategories.Add(this);
						this._parentSubCategorieId = value.id;
					}
					else
					{
						this._parentSubCategorieId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubCategorie1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Vraags(Vraag entity)
		{
			this.SendPropertyChanging();
			entity.SubCategorie = this;
		}
		
		private void detach_Vraags(Vraag entity)
		{
			this.SendPropertyChanging();
			entity.SubCategorie = null;
		}
		
		private void attach_SubCategories(SubCategorie entity)
		{
			this.SendPropertyChanging();
			entity.SubCategorie1 = this;
		}
		
		private void detach_SubCategories(SubCategorie entity)
		{
			this.SendPropertyChanging();
			entity.SubCategorie1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Antwoord")]
	public partial class Antwoord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _text;
		
		private bool _isCorrect;
		
		private int _vraagId;
		
		private bool _isActive;
		
		private EntityRef<Vraag> _Vraag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnisCorrectChanging(bool value);
    partial void OnisCorrectChanged();
    partial void OnvraagIdChanging(int value);
    partial void OnvraagIdChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    #endregion
		
		public Antwoord()
		{
			this._Vraag = default(EntityRef<Vraag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isCorrect", DbType="Bit NOT NULL")]
		public bool isCorrect
		{
			get
			{
				return this._isCorrect;
			}
			set
			{
				if ((this._isCorrect != value))
				{
					this.OnisCorrectChanging(value);
					this.SendPropertyChanging();
					this._isCorrect = value;
					this.SendPropertyChanged("isCorrect");
					this.OnisCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vraagId", DbType="Int NOT NULL")]
		public int vraagId
		{
			get
			{
				return this._vraagId;
			}
			set
			{
				if ((this._vraagId != value))
				{
					if (this._Vraag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvraagIdChanging(value);
					this.SendPropertyChanging();
					this._vraagId = value;
					this.SendPropertyChanged("vraagId");
					this.OnvraagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vraag_Antwoord", Storage="_Vraag", ThisKey="vraagId", OtherKey="id", IsForeignKey=true)]
		public Vraag Vraag
		{
			get
			{
				return this._Vraag.Entity;
			}
			set
			{
				Vraag previousValue = this._Vraag.Entity;
				if (((previousValue != value) 
							|| (this._Vraag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vraag.Entity = null;
						previousValue.Antwoords.Remove(this);
					}
					this._Vraag.Entity = value;
					if ((value != null))
					{
						value.Antwoords.Add(this);
						this._vraagId = value.id;
					}
					else
					{
						this._vraagId = default(int);
					}
					this.SendPropertyChanged("Vraag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
